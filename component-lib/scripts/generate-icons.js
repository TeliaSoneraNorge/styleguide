/* eslint-disable no-console */

const fs = require('fs');
const path = require('path');
const SVGO = require('svgo');

const iconsPath = path.join(__dirname, '../assets/business-icons');
const iconComponentPath = path.join(__dirname, '../src/atoms/Icon/Icon.generated.tsx');

async function run() {
  /**
   *
   * First step, process each individual SVG file
   *
   */
  const svgo = new SVGO({
    plugins: [
      { cleanupAttrs: true },
      { removeDoctype: true },
      { removeXMLProcInst: true },
      { removeComments: true },
      { removeMetadata: true },
      { removeTitle: true },
      { removeDesc: true },
      { removeUselessDefs: true },
      { removeEditorsNSData: true },
      { removeEmptyAttrs: true },
      { removeHiddenElems: true },
      { removeEmptyText: true },
      { removeEmptyContainers: true },
      { removeViewBox: false },
      { cleanUpEnableBackground: true },
      { convertStyleToAttrs: true },
      { convertColors: true },
      { convertPathData: true },
      { convertTransform: true },
      { removeUnknownsAndDefaults: true },
      { removeNonInheritableGroupAttrs: true },
      { removeUselessStrokeAndFill: true },
      { removeUnusedNS: true },
      { cleanupIDs: true },
      { cleanupNumericValues: true },
      { moveElemsAttrsToGroup: true },
      { moveGroupAttrsToElems: true },
      { collapseGroups: true },
      { removeRasterImages: false },
      { mergePaths: true },
      { convertShapeToPath: true },
      { sortAttrs: true },
      { transformsWithOnePath: false },
      { removeDimensions: true },
    ],
  });

  const icons = [];
  const iconFiles = fs.readdirSync(iconsPath).filter(f => f[0] !== '.');

  let result = { processed: [], errors: [] };
  for (const i in iconFiles) {
    const iconFileName = iconFiles[i];
    try {
      if (!iconFileName.match(/\.svg$/)) {
        throw new Error(`Only *.svg files allowed`);
      }
      const iconFileData = fs.readFileSync(path.resolve(iconsPath, iconFileName));
      let svg;
      try {
        svg = await svgo.optimize(iconFileData, { path: iconFileName });
      } catch (error) {
        throw new Error(`Cannot process SVG content`);
      }
      if (!svg || !svg.data || svg.data.length === 0) {
        throw new Error(`No SVG content`);
      }
      icons.push({
        icon: iconFileName.slice(0, -4),
        filename: iconFileName,
        svg: svg.data,
      });
      result.processed.push(iconFileName);
    } catch (error) {
      result.errors.push(`${iconFileName}: ${error.message}`);
    }
  }

  console.log('generate-icons script completed. Result:', result);

  if (result.errors.length > 0) {
    process.exit(1);
  }

  /**
   *
   * Second step, generate React code
   *
   */
  const iconComponent = [
    `//\n`,
    `// WARNING\n`,
    `//\n`,
    `// Do not make manual changes to this file.\n`,
    `// This file was generated by scripts/generate-icons.js.\n`,
    `//\n`,
    `//\n`,
    `\n\n`,
    `import React from 'react';\n\n`,
    `/**\n`,
    ` * A list of all available icons in the icon set.\n`,
    ` */\n`,
    'export type IconDefinition = ',
    icons.map(i => `'${i.icon}'`).join(' | '),
    `;\n\n`,
    `export const availableIcons: IconDefinition[] = [`,
    icons.map(i => `'${i.icon}'`).join(', '),
    `];\n\n`,
    `export const IconSvg = {\n`,
    icons.map(i => `  '${i.icon}': ${i.svg},\n`).join(''),
    `};\n`,
  ];

  fs.writeFileSync(iconComponentPath, iconComponent.join(''));
}

run();
